		 Installation and Build Instructions for the PSE
                              (Unix/non-CVS version)
			
                          last modified on July 3, 2000
				  Chris Moulding


Table of Contents

1) Prerequisites
2) System Requirements
3) Installing the PSE
4) Building the PSE
5) Running the PSE
6) Additional Documentation
7) Getting Help
8) Surviving the tcl stuff


1) Prerequisites


   It is highly recommended that you have a fair amount of knowledge
   and experience with operating systems, file systems, and
   programming in general (and for SGI or Linux specifically) to
   build and install the PSE.  If you find that any of the
   instructions below are foreign to you, then you may want to have a
   system administrator help you out.


2) System Requirements


   NOTE: the versions are appended with one of the following symbols:
     + = same or newer version
     # = exact version required

   For SGI:
     SGI Irix 6.5 +
     SGI MipsPro compiler 7.3.1 +
       www.sgi.com/developers/devtools/languages/mipspro.html

   For Linux:
     Linux 2.2.14 +
     GCC compiler collection 2.95.2 +
       ftp://gcc.gnu.org/pub/gcc/releases/gcc-2.95.2/gcc-2.95.2.tar.gz

   Tcl and Tk 8.0.4 #
     ftp://ftp.scriptics.com/pub/tcl/tcl8_0/tcl8.0.4.tar.gz  
     ftp://ftp.scriptics.com/pub/tcl/tcl8_0/tk8.0.4.tar.gz

   Itcl/Itk 3.0.1 #
     ftp://ftp.tcltk.com/tcltk/pub/itcl/itcl3.0.1.tar.gz

   BLT 2.4t +
     see www.tcltk/com/blt for the latest version

   GNU make 3.76.1 +
     ftp://ftp.gnu.org/pub/gnu/make/make-3.76.1.tar.gz

   Xerces XML parser 1.1.0 +
     http://xml.apache.org/dist/xerces-c/stable/Xerces-C-src_1_1_0.tar.gz
     see http://xml.apache.org/xerces-c/build.html#BuildUNIX for build
     instructions


3) Installing the PSE


   unzip and untar the distribution file (PSE.tar.gz)
   into the directory where you would like the PSE to be
   installed, e.g. /usr/local/contrib/PSE.  There is no
   "make install" step in the build process, so where ever
   you untar to is where it will be installed.  We'll call
   this directory PSE_TOP from now on.


4) Building the PSE


   These are the steps for building the PSE:

   *  Make sure that your system setup matches the
      system requirements listed in section 1, and
      that your environment variables (i.e. PATH
      and LD_LIBRARY_PATH) are set to use those
      programs and libraries.

      This part is the bane of many a users existence,
      so we've added section 7 to assist you.

   *  Edit PSE_TOP/src/configure:

      The xerces paths are hardcoded to 
	  
        XML_LIB_DIR="/usr/local/xerces-c/lib"
        XML_INCLUDE_DIR="/usr/local/xerces-c/include"

      find and edit these lines to reflect your system's paths.

   *  Run configure.  From the PSE_TOP/src dir type:

        configure --enable-package="PACKAGE"

      Where PACKAGE is the name (or names) of the packages you want
      to use.  For example "SCIRun", "Uintah", "BioPSE" or
      "SCIRun Uintah BioPSE".

   *  Finally, run GNU make.  From the PSE_TOP/src dir type:

        make

      It takes about 45 minutes to build the PSE (with only
      the SCIRun package enabled) on a single 250MHz R10K
      processor.  You can use the -j flag to reduce build
      time.  For example:

        make -j 32

      will use 32 processors (if available) to build the PSE.  It
      takes 5 minutes to build on 32 processors.

      If the build failed, see the section below called
      "Getting help"


5) Running the PSE


   After a successful build, there will be  an executable in
   the PSE_TOP/src directory named:

     pse

   Running this will open the PSE network canvas window and start
   a console (called the PSE console) in the shell where pse was
   started from.
   
   If the window does not appear, note any errors
   displayed in the PSE console and see the getting
   help section below.  Of course, it might just be
   hiding behind other windows on the desktop!


6) Additional Documentation


   Additional Documentation about the PSE can be obtained on
   the web at:

     http://www.cs.utah.edu/sci/scirun/


7) Getting Help


   There is a mailing list available for asking questions about
   the PSE or to get help with resolving a problem.  To subscribe to
   the mailing list, send email to:

     majordomo@cs.utah.edu

   with the following in the body of the message:

     subscribe scirun-develop

   To use the mailing list, simply send your question or problem
   as an email to the list:

     scirun-develop@cs.utah.edu

   To aid in problem resolution, include a verbatim copy of the error(s) 
   displayed (if any).  Also include a short description of what you
   we're doing (running a network, building the tree, etc.) and which
   version of the PSE you have (PSE 1.0 beta).


8) Surviving the tcl stuff


   The most difficult part of getting the PSE built has
   historically been the "tcl stuff".  This is due in part
   because the PSE depends on exact tcl versions and on a
   "correct" tcl installation, but also because of annoying
   bugs in the tcl distributions.

   Because of these problems we've included this section
   to, hopefully painlessly, guide you through the process.
   
   Since the BLT package is not required to have an exact
   version (in fact, the only obtainable version is the
   latest listed on the blt website - which changes very
   frequently), we cannot guarentee that the blt distribution
   will work as described below.  However, we have a lot
   of experience with these packages and may be able to
   assist you if anything goes awry.

   The configure and installation steps are very important.
   Not configuring and installing as indicated will cause
   the PSE configure and build to fail.
   
   Be sure to configure, build and install each package
   before the next, i.e. first tcl, then tk, then itcl/itk
   and finally blt.

   *  First, Get the tcl distributions (tcl, tk, itcl/itk
      and blt).  To assist in locating the distributions, 
      we've included the URL's to them in the System
      requirements section.

   *  Second, unzip and untar all distributions into a
      place where you would like to build them.  It doesn't 
      necessarily have to be the installation location.
      an example location is /usr/local/contrib/tcl/src:

        /usr/local/contrib/tcl/src/tcl8.0.4
        /usr/local/contrib/tcl/src/tk8.0.4
        /usr/local/contrib/tcl/src/itcl3.0.1
        /usr/local/contrib/tcl/src/blt2.4t

      We'll call this location TCL_SRC from now on.

   *  Third, configure the distributions for a "correct" installation

      Configure the tcl, tk, itcl/itk, and blt distributions as follows
      (Note: INST_DIR is the location of the /lib and /bin dirs where
      you want the final libraries and binaries to be installed, NOT
      including /lib or /bin.  More details about INST_DIR are below):
     
        cd TCL_SRC/tcl8.0.4/unix
        configure --enable-shared --prefix=INST_DIR

        cd TCL_SRC/tk8.0.4/unix
        configure --enable-shared --prefix=INST_DIR \
                  --with-tcl=TCL_SRC/tcl8.0.4/unix        

        cd TCL_SRC/itcl3.0.1
        configure --enable-shared --prefix=INST_DIR \
                  --with-tcl=INST_DIR/lib \
                  --with-tk=INST_DIR/lib

        cd TCL_SRC/blt2.4t
        configure --enable-shared --prefix=INST_DIR \
                  --with-tcl=INST_DIR/lib \
                  --with-tk=INST_DIR/lib \
                  --with-cc=cc

      Where INST_DIR is the location of the /lib and /bin dirs where
      you want the final libraries and binaries to be installed, NOT
      including /lib or /bin.  For example, the following:
   
        --prefix=/usr/local/contrib

      indicates that the /lib and /bin locations for the example tcl
      install will be:
   
        /usr/local/contrib/lib and
        /usr/local/contrib/bin

      INST_DIR must be a full, absolute path.  If you build and install
      the tcl distributions into your home directory, do not use ~ to
      abbreviate the paths.

   *  Fourth, edit some files

      SGI only:

	Edit each of the following makefiles:

          TCL_SRC/tcl8.0.4/unix/Makefile
          TCL_SRC/tk8.0.4/unix/Makefile
          TCL_SRC/itcl3.0.1/itcl/unix/Makefile
          TCL_SRC/itcl3.0.1/itk/unix/Makefile
          TCL_SRC/blt2.4t/src/shared/Makefile

        In each makefile find this line:

          SHLIB_LD =	ld -32 -shared -rdata_shared -rpath /usr/local/lib

        and change it to:

          SHLIB_LD =	ld -YOUR_ABI -shared -rdata_shared -rpath INST_DIR
                               ^                                    ^
                               |                                    |
                               *                                    *

        where YOUR_ABI is your system's default ABI (applications binary
        interface).  It is one of 32, n32 or 64.  Look in the file
        /etc/compiler.defaults.  In it there will be a line similar to:

          -DEFAULT:abi=n32:isa=mips4:proc=r10k
 
        This example says the default ABI is n32 ("abi=n32").  If you cannot
        find this line or the file, and you don't know your system's ABI,
        assume that it's n32.

      Linux only:

        Edit the following source file:

          TCL_SRC/tcl8.0.4/generic/tclPosixStr.c

        Search for the following two lines:

          case ENOTSUP: return "ENOTSUP";
          case ENOTSUP: return "operation not supported";

        and comment them out:

          /*case ENOTSUP: return "ENOTSUP";*/
          /*case ENOTSUP: return "operation not supported";*/
     

   *  Fifth, build and install the distributions
 
      These commands will build and install tcl, tk, itcl/itk, and blt:

        cd TCL_SRC/tcl8.0.4/unix
        make   
        make -k install

        cd TCL_SRC/tk8.0.4/unix
        make   
        make -k install

        cd TCL_SRC/itcl3.0.1
        make   
        make -k install

        cd TCL_SRC/blt2.4t 
        make
        make -k install

   *  Finally, set your paths

      csh commands:

        setenv LD_LIBRARY_PATH INST_DIR/lib:$LD_LIBRARY_PATH
        setenv PATH INST_DIR/bin:$PATH  

      sh commands:

        export LD_LIBRARY_PATH=INST_DIR/lib:$LD_LIBRARY_PATH
        export PATH=INST_DIR/bin:$PATH

      ( !! SGI ONLY !!) In the previous commands,
      LD_LIBRARY_PATH may actually be LD_LIBRARYN32_PATH
      or LD_LIBRARY64_PATH if your system's default ABI
      is n32 or 64.

      You can verify that your tcl installation is correct by
      typing the following:

        which tclsh8.0
        which wish8.0
        which itclsh3.0
        which itkwish3.0
        which bltwish24

      if they all report that the executables being used are in

        INST_DIR/bin

      Then your environment variables seem to be correct, and the
      build most likely worked.

