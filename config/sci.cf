
/*
 * imake configuration file for the SCI group development
 * tree.
 *
 * Written by Steven G. Parker Feb 1994
 */
#ifndef SCI_SCI_H
#define SCI_SCI_H 1

#include <config/imake.h>

INCLUDES = -I$(TOP) $(LOCALINCLUDES)
CCC = SCI_CppCompiler
CCFLAGS = SCI_CppFlags $(INCLUDES)
CC = SCI_CCompiler
CFLAGS = SCI_CFlags $(INCLUDES)
DEFINES =
LOADER = SCI_Linker
SIZE = SCI_Size
LDR = ld -r
LDSHARED = SCI_ShLib
#ifdef SCI_LinkerNeedsCppFlags
#define ldflags2 SCI_CppFlags $(INCLUDES)
#else
#define ldflags2
#endif
LDOPTIONS = SCI_LinkerFlags ldflags2
#undef ldflags2
CPPINCLUDES = SCI_CppIncludeLocation
OTHERINCLUDES = -I$(CPPINCLUDES)

.SUFFIXES: .cc
.cc.o:
	$(CCC) $(CCFLAGS) -c $<


default: all

#define PassCDebugFlags

IMAKE_DEFINES = -I$(TOP) -I../$(TOP)

#ifdef SCI_MakeTemplateLib
#define SCI_TemplateCommand(objs, libs) \
	 SCI_MakeTemplateLib SCI_TemplateDir objs libs @@	
#else
#define SCI_TemplateCommand(objs, libs)
#endif

#define SCIProgramTarget(program, objs, libs, ldflags) 		@@\
AllTarget(program)						@@\
								@@\
program: objs libs SCI_LinkerLib				@@\
	RemoveTargetProgram($@)					@@\
	SCI_TemplateCommand(objs, libs)\
$(LOADER) -o $@ $(LDOPTIONS) SCI_TemplateLib objs libs SCI_LinkerLib ldflags @@\
								@@\
InstallProgram(program, $(BINDIR))				@@\
								@@\
clean::								@@\
	$(RM) program

#define SCIProgramTarget2(program, objs, libs, ldflags) 		@@\
AllTarget(program)						@@\
								@@\
program: objs libs SCI_LinkerLib				@@\
	SCI_TemplateCommand(objs, libs)\
$(LOADER) -o $@ $(LDOPTIONS) objs libs SCI_LinkerLib ldflags @@\
								@@\
InstallProgram(program, $(BINDIR))				@@\
								@@\
clean::								@@\
	$(RM) program


#define SCIDependTarget(srcs)					@@\
depend::							@@\
	$(DEPEND) -s "# DO NOT DELETE" -- $(ALLDEFINES)	\	@@\
		$(OTHERINCLUDES) $(LOCALINCLUDES) -- srcs


/*
 * CleanSubdirs - generate rules to recursively clean out garbage files.
 */
#ifndef SCINamedCleanSubdirs
#define SCINamedCleanSubdirs(name,dirs) \
NamedTargetSubdirs(name,dirs,"cleaning",NullParameter,clean)
#endif /* NamedCleanSubdirs */

#ifndef SCINamedSOCleanSubdirs
#define SCINamedSOCleanSubdirs(name,dirs) \
NamedTargetSubdirs(name,dirs,"cleaning shared objects",NullParameter,soclean)
#endif /* NamedCleanSubdirs */

#ifndef SCICleanSubdirs
#define SCICleanSubdirs(dirs) \
SCINamedCleanSubdirs(clean,dirs) @@\
SCINamedSOCleanSubdirs(soclean,dirs)
#endif

#ifndef SCICleanSubdirs2
#define SCICleanSubdirs2(dirs) \
SCINamedCleanSubdirs(clean,dirs)
#endif

#define SCISubdirs(subdirs)					@@\
MakeSubdirs(subdirs)						@@\
MakefileSubdirs(subdirs)					@@\
DependSubdirs(subdirs)						@@\
InstallSubdirs(subdirs)						@@\
SCICleanSubdirs(subdirs)

#define SCISubdirs2(subdirs)					@@\
MakefileSubdirs(subdirs)					@@\
DependSubdirs(subdirs)						@@\
InstallSubdirs(subdirs)						@@\
SCICleanSubdirs(subdirs)

#define SCISubdirs3(subdirs)					@@\
MakeSubdirs(subdirs)						@@\
InstallSubdirs(subdirs)						@@\
SCICleanSubdirs2(subdirs)

#define SCILibraryTarget(objs, lib)				@@\
AllTarget(lib)							@@\

lib:	objs

#ifdef SCI_PrelinkCommand
#define PreLink(objs)SCI_PrelinkCommand objs
#else
#define PreLink(objs)@ XCOMM no prelink
#endif

#define SCIObjLibraryTarget(libname,objlist,othersos,libsos)            @@\
AllTarget(Concat(lib,libname.so))                                       @@\
                                                                        @@\
Concat(lib,libname.so): objlist othersos                                @@\
	$(RM) $@                                                        @@\
	PreLink(objlist)						@@\
	$(LDSHARED) -o $@ objlist othersos libsos || $(RM) $@


#endif


/*
 * NormalLibraryTarget - generate rules to create a library.
 */
#ifndef SCINormalLibraryTarget
#define	SCINormalLibraryTarget(libname,objlist)				@@\
AllTarget(Concat(lib,libname.a))					@@\
									@@\
Concat(lib,libname.a): objlist						@@\
	$(RM) $@							@@\
	PreLink(objlist)						@@\
	$(AR) $@ objlist						@@\
	RanLibrary($@)
#endif /* NormalLibraryTarget */


clean::
	$(RM) -r ii_files
	$(RM) -r ILDUMPS

soclean::
	$(RM) *.so
