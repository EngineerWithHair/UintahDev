/*
 * This file was automatically generated by SCC - do NOT edit!
 * You should edit Reducer.scc instead 
 */

#ifndef SCI_THREAD_REDUCER_H
#define SCI_THREAD_REDUCER_H 1

/**
 * Perform reduction operations over a set of threads.  Reduction
 * operations include things like global sums, global min/max, etc.
 * In these operations, a local sum (operation) is performed on each
 * thread, and these sums are added together.
 */
class ThreadGroup;

#include "Barrier.h"

class Reducer  : public Barrier {
    struct data {
	double d;
    };
    struct join_array {
	data d;
	// Assumes 128 bytes in a cache line...
	char filler[128-sizeof(data)];
    };
    struct pdata {
	int buf;
	char filler[128-sizeof(int)];	
    };
    join_array* join[2];
    pdata* p;
    int arraysize;
    void collective_resize(int proc) ;
public:
    Reducer(const char* name, int nthreads) ;
    Reducer(const char* name, ThreadGroup* group) ;
    virtual ~Reducer() ;
    double sum(int proc, double mysum) ;
    double max(int proc, double mymax) ;
};

#endif
