/*
 * This file was automatically generated by SCC - do NOT edit!
 * You should edit Semaphore.scc instead 
 */

#ifndef SCI_THREAD_SEMAPHORE_H
#define SCI_THREAD_SEMAPHORE_H 1

/*
 * Counting semaphore synchronization primitive.  A semaphore provides
 * atomic access to a special counter.  The <i>up</i> method is used
 * to increment the counter, and the <i>down</i> method is used to
 * decrement the counter.  If a thread tries to decrement the counter
 * when the counter is zero, that thread will be blocked until another
 * thread calls the <i>up</i> method.
 */




class Semaphore_private;
class Semaphore {
    Semaphore_private* priv;
    const char* name;
public:
    Semaphore(const char* name, int count);
    ~Semaphore();
    void up();
    void down();
    bool tryDown();
};

#endif
