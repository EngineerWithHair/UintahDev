/*
 * This file was automatically generated by SCC - do NOT edit!
 * You should edit ConditionVariable.scc instead 
 */

#ifndef SCI_THREAD_CONDITIONVARIABLE_H
#define SCI_THREAD_CONDITIONVARIABLE_H 1

/**
 * Condition variable primitive.  When a thread calls the
 * <i>wait</i> method,which will block until another thread calls
 * the <i>cond_signal</i> or <i>cond_broadcast</i> methods.  When
 * there are multiple threads waiting, <i>cond_broadcast</i> will unblock
 * all of them, while <i>cond_signal</i> will unblock only one (an
 * arbitrary one) of them.  This primitive is used to allow a thread
 * to wait for some condition to exist, such as an available resource.
 * The thread waits for that condition, until it is unblocked by another
 * thread that caused the condition to exist (<i>i.e.</i> freed the
 * resource).
 */

#include "Semaphore.h"
#include "Mutex.h"

class ConditionVariable {
    const char* name;
    int nwaiters;
    Mutex mutex;
    Semaphore semaphore;
public:
    ConditionVariable(const char* name)
	;
    ~ConditionVariable() ;
    void wait(Mutex& m) ;
    void cond_signal()  ;
    void cond_broadcast() ;
};

#endif
