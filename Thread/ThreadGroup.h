/*
 * This file was automatically generated by SCC - do NOT edit!
 * You should edit ThreadGroup.scc instead 
 */

#ifndef SCI_THREAD_THREADGROUP_H
#define SCI_THREAD_THREADGROUP_H 1

/*
 * A group of threads that are linked together for scheduling
 * and control purposes.  The threads may be stopped, resumed
 * and alerted simultaneously.
 */
class Thread;

#include "Mutex.h"

class ThreadGroup {
    Mutex lock;
    char* name;
    ThreadGroup* parent;
    int ngroups;
    ThreadGroup** groups;
    int nthreads;
    Thread** threads;
    void addme(ThreadGroup* t) ;
    void addme(Thread* t) ;
protected:
    friend class Thread;
    static ThreadGroup* default_group;
public:
    ThreadGroup(char* name, ThreadGroup* parentGroup=0)
	;
    ~ThreadGroup() ;
    int nactive(bool countDaemon) ;
    void stop() ;
    void resume() ;
    void join() ;
    void detach() ;
    void alert(int code=0) ;
    ThreadGroup* parentGroup() ;
    void gangSchedule();
};

#endif
